
Polymorphism in Java is classified into two main types based on when it is resolved: 
	1. Compile-Time Polymorphism 
	2. Run-Time Polymorphism. 
Here's a detailed explanation of each type


1. Compile-Time Polymorphism (Static Polymorphism)
This type of polymorphism is resolved at compile time. It is achieved using method overloading or operator overloading (though Java does not support custom operator overloading).

Method Overloading
In method overloading, multiple methods have the same name but different parameter lists.
The compiler determines which method to call based on the method signature (number, type, and order of parameters).

class Calculator {
    // Overloaded methods
    int multiply(int a, int b) {
        return a * b;
    }

    double multiply(double a, double b) {
        return a * b;
    }

    int multiply(int a, int b, int c) {
        return a * b * c;
    }
}

public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator();

        System.out.println(calc.multiply(5, 10));          // Calls multiply(int, int)
        System.out.println(calc.multiply(5.5, 10.5));      // Calls multiply(double, double)
        System.out.println(calc.multiply(2, 3, 4));        // Calls multiply(int, int, int)
    }
}


==================================================================================================

2. Run-Time Polymorphism (Dynamic Polymorphism)
This type of polymorphism is resolved at runtime. It is achieved using method overriding and works through dynamic method dispatch.

Method Overriding
Occurs when a subclass provides a specific implementation of a method already defined in its parent class.
The overridden method is called based on the object that is referred to at runtime, not the type of the reference variable.


class Animal {
    void makeSound() {
        System.out.println("Some generic animal sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Woof! Woof!");
    }
}

class Cat extends Animal {
    @Override
    void makeSound() {
        System.out.println("Meow! Meow!");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal animal;  // Reference of parent type

        animal = new Dog();
        animal.makeSound();  // Output: Woof! Woof!

        animal = new Cat();
        animal.makeSound();  // Output: Meow! Meow!
    }
}


==========================================================================

Another Example


public abstract class UIControl{
    public abstract void draw();
}


public class CheckBox extends UIControl{
    public void draw(){
        System.out.print("Drawing a checkbox ");
    }
}



public class TextBox extends UIControl{
    public void draw(){
        System.out.print("Drawing a textbox");
    }
}




public class Main{
	public static void main(String[] args) {
		drawUIControl(new TextBox());  
    drawUIControl(new CheckBox());
	}
	
	public static void drawUIControl(UIControl control){
	    control.draw();
	}
}
