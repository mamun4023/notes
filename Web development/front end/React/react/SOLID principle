A SOLID pattern in React.js refers to applying the SOLID principles—a set of five design principles for building 
maintainable and scalable software systems—in React applications. These principles were originally conceptualized 
for object-oriented programming but can be adapted to functional and component-based paradigms like React.

Here’s how each principle can be applied in React:


1. Single Responsibility Principle (SRP)
A component should have one and only one reason to change. It should do one thing and do it well.

Implementation:
- Split large components into smaller, reusable ones.
- Delegate logic to custom hooks or utility functions instead of cluttering the component.



========================== Separate data fetching logic into a custom hook ======================
const useUserData = (userId) => {
  const [user, setUser] = React.useState(null);

  React.useEffect(() => {
    fetch(`/api/user/${userId}`)
      .then((response) => response.json())
      .then((data) => setUser(data));
  }, [userId]);

  return user;
};

const UserProfile = ({ userId }) => {
  const user = useUserData(userId);

  return user ? <h1>{user.name}</h1> : <p>Loading...</p>;
};


2. Open/Closed Principle (OCP)
Components or modules should be open for extension but closed for modification.
Implementation:
- Use props to make components customizable without changing their internal logic.
- Implement Higher-Order Components (HOCs) or render props for extending functionality.

=================================Code ====================================================

const Button = ({ variant, children }) => {
  const className = variant === 'primary' ? 'btn-primary' : 'btn-secondary';
  return <button className={className}>{children}</button>;
};

// Usage
<Button variant="primary">Click Me</Button>;

3. Liskov Substitution Principle (LSP)
Derived classes or components should be replaceable with their base class or component without altering the program's correctness.
Implementation:
- Ensure that child components respect the expectations of their parent.
- Avoid breaking contracts established by prop types or component interfaces.

============================== `ErrorText` extends `Text`'s behavior without breaking its contract. ================
const Text = ({ content }) => <p>{content}</p>;

const ErrorText = ({ content }) => <Text content={`Error: ${content}`} />;



4. Interface Segregation Principle (ISP)
Components should not be forced to depend on props they don’t use.
Implementation:
- Pass only the required props to components.
- Use composition instead of inheritance to avoid bloating components with unnecessary props.

======================== Code ====================================================

const Avatar = ({ image }) => <img src={image} alt="Avatar" />;
const UserCard = ({ user }) => (
  <div>
    <Avatar image={user.avatar} />
    <h2>{user.name}</h2>
  </div>
);



