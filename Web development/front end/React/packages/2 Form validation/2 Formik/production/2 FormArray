import React from "react";
import {
   FormikProvider,
   useFormik,
   Form,
   Field,
   ErrorMessage,
   FieldArray,
   getIn,
} from "formik";
import * as Yup from "yup";

import "./App.css";

export default function App() {
   const validationSchema = Yup.object().shape({
      title: Yup.string().required("Title is required"),
      variations: Yup.array().of(
         Yup.object().shape({
            name: Yup.string().min(4, "too short").required("Required"),
         })
      ),

      // .test("Unique", "Values need te be unique", (values) => {
      //    return new Set(values).size === values.length;
      // }),
   });

   const formik = useFormik({
      initialValues: {
         title: "",
         variations: [
            {
               name: "",
               price: "",
            },
         ],
      },
      validationSchema: validationSchema,
      onSubmit: (values) => {
         console.log(values);
      },
   });

   const {
      errors,
      touched,
      values,
      isSubmitting,
      handleSubmit,
      getFieldProps,
   } = formik;
   return (
      <div>
         <FormikProvider value={formik}>
            <Form
               encType="multipart/form-data"
               autoComplete="off"
               noValidate
               onSubmit={handleSubmit}
            >
               <FieldArray name="variations">
                  {({ push, remove }) => (
                     <div>
                        {values.variations.map((p, index) => {
                           const name = `variations[${index}].name`;
                           const touchedName = getIn(touched, name);
                           const errorName = getIn(errors, name);
                           const price = `variations[${index}].price`;
                           const touchedPrice = getIn(touched, price);
                           const errorPrice = getIn(errors, price);

                           return (
                              <div key={p.id}>
                                 <input
                                    type="text"
                                    name={name}
                                    value={p.name}
                                    {...getFieldProps(name)}
                                 />
                                 <ErrorMessage
                                    name={name}
                                    render={(msg) => <p> {msg} </p>}
                                 />
                                 <button onClick={() => remove(index)}>
                                    X
                                 </button>
                              </div>
                           );
                        })}
                        <button onClick={() => push({ name: "", price: "" })}>
                           add
                        </button>
                     </div>
                  )}
               </FieldArray>
            </Form>
         </FormikProvider>
      </div>
   );
}
