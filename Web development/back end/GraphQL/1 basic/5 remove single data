// const express = require('express');
// const app = express();
// const {graphqlHTTP} = require('express-graphql');

// const Schema = require('./schema');


// app.use('/', graphqlHTTP({
//   schema : Schema,
//   graphiql : true,
// }))



// app.listen(3000, ()=>{
//   console.log("server is running...")
// })



const express = require('express');
const app = express();
const mongoose = require('mongoose');
const GraphQLHTTP = require('express-graphql').graphqlHTTP;
const {
    GraphQLObjectType, 
    GraphQLString, 
    GraphQLSchema, 
    GraphQLList, 
    GraphQLID,
    GraphQLNonNull

} = require('graphql');




// db connection
let db_string = 'mongodb://localhost:27017/test';
mongoose.connect(db_string, (err)=>{
    if(!err){
        console.log("DB Connected")
    }
})


// db model
const UserSchema = new mongoose.Schema({
    name : {
        type : String,
        required : true
    },
    email : {
        type : String,
        required : true
    }
})


const UserModel = mongoose.model('user', UserSchema)


const UserType = new GraphQLObjectType({
    name : "Book",
    fields : ()=> ({ 
        id : { type : GraphQLString },
        name : {type : GraphQLString},
        email : {type : GraphQLString}
    })
})

const RootQuery = new GraphQLObjectType({
    name : "RootQueryType",
    fields : {
        users : {
            type :  new GraphQLList(UserType),
            resolve(parent, args){
               return UserModel.find()
            }
        },
        user : {
          type : UserType,
          args : {id : {type : GraphQLID}},
          resolve(parent, args){
            return UserModel.findById(args.id)
          }
        }
    }
})


// mutation for adding user into database
const Mutation = new GraphQLObjectType({
    name : 'Mutation',
    fields : {
        addUser : {
            type : UserType,
            args : {
                name : {type : new GraphQLNonNull(GraphQLString)},
                email : {type : new GraphQLNonNull(GraphQLString)}
            },
            resolve(parent, args){
                const newUser = new UserModel({
                    name : args.name,
                    email : args.email
                })

                return newUser.save()
            }
        },

        // remove user 
        deleteUser : {
            type : UserType,
            args : {id : {type : GraphQLID}},
            resolve(parent, args){
                return UserModel.findByIdAndRemove(args.id)
            }
        }

    }
})


const schema = new GraphQLSchema({
    query :  RootQuery,
    mutation : Mutation,
})


app.use('/', GraphQLHTTP({
    schema,
    graphiql : true
}))


app.listen(3000,()=>{
    console.log("server running at 3000")
})
