Generics in TypeScript allow you to create flexible and reusable code by allowing you to write functions, 
classes, and interfaces that can work with different data types. They provide a way to define placeholders 
for types that will be determined when the code is actually used



# Without generics, we would either have to give the identity function a specific type:

  function identity(arg: number): number {
    return arg;
  }


Or, we could describe the identity function using the any type:

function identity(arg: any): any {
  return arg;
}


While using any is certainly generic in that it will cause the function to accept any and all types for the type of arg, 
we actually are losing the information about what that type was when the function returns. If we passed in a number, 
the only information we have is that any type could be returned.

Instead, we need a way of capturing the type of the argument in such a way that we can also use it to denote 
what is being returned. Here, we will use a type variable, a special kind of variable that works on types rather 
than values.



#Generics Type checking 

function identify<T>(args : T) : T {
    return args;
}


const result1 = identify("helolo");  // return type string
const result2 = identify(10);        // return type number

console.log(typeof result1)
console.log(typeof result2)
